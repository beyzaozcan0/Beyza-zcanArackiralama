@model IEnumerable<object>

<style>
    .car-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 2rem;
        padding: 2rem;
    }

    .car-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
        overflow: hidden;
    }

    .car-card:hover {
        transform: translateY(-5px);
    }

    .car-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
    }

    .car-info {
        padding: 1.5rem;
    }

    .car-brand {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    .car-model {
        color: #7f8c8d;
        margin-bottom: 1rem;
    }

    .car-details {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .car-detail-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #34495e;
    }

    .car-price {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2ecc71;
        margin-bottom: 1rem;
    }

    .rent-button {
        width: 100%;
        padding: 0.75rem;
        background: #3498db;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .rent-button:hover {
        background: #2980b9;
    }

    .status-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
    }

    .status-available {
        background: #2ecc71;
        color: white;
    }

    .status-unavailable {
        background: #e74c3c;
        color: white;
    }

    .hero-section {
        background: linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url('/images/hero-bg.jpg');
        background-size: cover;
        background-position: center;
        color: white;
        text-align: center;
        padding: 4rem 2rem;
        margin-bottom: 2rem;
    }

    .hero-title {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .hero-subtitle {
        font-size: 1.5rem;
        opacity: 0.9;
    }
</style>

<div class="hero-section">
    <h1 class="hero-title">Araç Kiralama</h1>
    <p class="hero-subtitle">En uygun fiyatlarla güvenilir araç kiralama hizmeti</p>
</div>

<div class="car-grid">
    @foreach (dynamic car in Model)
    {
        <div class="car-card">
            <div style="position: relative;">
                <img src="@(string.IsNullOrEmpty(car.ImagePath) ? "/images/default-car.jpg" : car.ImagePath)" 
                     alt="@car.Model" 
                     class="car-image" />
                <span class="status-badge @(car.IsAvailable ? "status-available" : "status-unavailable")">
                    @(car.IsAvailable ? "Müsait" : "Kirada")
                </span>
            </div>
            <div class="car-info">
                <div class="car-brand">@car.BrandName</div>
                <div class="car-model">@car.Model (@car.Year)</div>
                <div class="car-details">
                    <div class="car-detail-item">
                        <i class="fas fa-car"></i>
                        <span>@car.Plate</span>
                    </div>
                    <div class="car-detail-item">
                        <i class="fas fa-calendar"></i>
                        <span>@car.Year</span>
                    </div>
                </div>
                <div class="car-price">
                    @car.DailyPrice.ToString("N0") ₺ / Gün
                </div>
                @if (car.IsAvailable)
                {
                    <button class="rent-button" onclick="rentCar(@car.Id)">
                        Hemen Kirala
                    </button>
                }
                else
                {
                    <button class="rent-button" style="background: #95a5a6;" disabled>
                        Şu Anda Kirada
                    </button>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        function rentCar(carId) {
            if (!@User.Identity.IsAuthenticated.ToString().ToLower()) {
                Swal.fire({
                    title: 'Giriş Yapın',
                    text: 'Araç kiralamak için lütfen giriş yapın.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Giriş Yap',
                    cancelButtonText: 'İptal'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/User/Login';
                    }
                });
                return;
            }

            Swal.fire({
                title: 'Kiralama Tarihleri',
                html: `
                    <div class="form-group">
                        <label>Başlangıç Tarihi</label>
                        <input type="date" id="startDate" class="form-control" min="${new Date().toISOString().split('T')[0]}">
                    </div>
                    <div class="form-group mt-3">
                        <label>Bitiş Tarihi</label>
                        <input type="date" id="endDate" class="form-control" min="${new Date().toISOString().split('T')[0]}">
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: 'Kirala',
                cancelButtonText: 'İptal',
                preConfirm: () => {
                    const startDate = document.getElementById('startDate').value;
                    const endDate = document.getElementById('endDate').value;
                    
                    if (!startDate || !endDate) {
                        Swal.showValidationMessage('Lütfen tarihleri seçin');
                        return false;
                    }
                    
                    if (new Date(startDate) > new Date(endDate)) {
                        Swal.showValidationMessage('Bitiş tarihi başlangıç tarihinden önce olamaz');
                        return false;
                    }

                    return { startDate, endDate };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Home/RentCar',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            carId: carId,
                            startDate: result.value.startDate,
                            endDate: result.value.endDate
                        }),
                        success: function(response) {
                            if (response.success) {
                                Swal.fire('Kiralama işlemi başarılı', response.message, 'success');
                            } else {
                                Swal.fire('Bir hata oluştu', response.message, 'error');
                            }
                        },
                        error: function() {
                            Swal.fire('Bir hata oluştu', 'Kiralama işlemi sırasında bir hata oluştu.', 'error');
                        }
                    });
                }
            });
        }
    </script>
}